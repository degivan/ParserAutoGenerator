programm
    : classDecl LFBR insideClass RFBR
    ;

insideClass
    : component
    | component insideClass
    |
    ;

classDecl
    : PUBLIC CLASS NAME
    ;

component
    : method
    | field
    ;

field
    : fieldIdentifiers TYPE NAME SEMI
    | fieldIdentifiers TYPE NAME EQ value SEMI
    ;

fieldIdentifiers
    : METHOD_ACCESS
    | PUBLIC
    | METHOD_ACCESS PUBLIC
    | PUBLIC STATIC
    | STATIC
    |
    ;

method
    : methodDecl block
    ;

methodDecl
    : methodIdentifiers voidType NAME LBR parameters RBR
    | methodIdentifiers voidType NAME LBR RBR
    ;

voidType
    : TYPE
    | VOID
    ;

operation
    : assignment
    | declaration
    | methodCallStatement
    | conditionStatement
    | loopStatement
    | returnStatement
    ;

returnStatement
    : RETURN int_expression SEMI
    | RETURN NAME SEMI
    | RETURN value SEMI
    | RETURN SEMI
    ;

loopStatement
    : WHILE condition block
    | DO block WHILE condition SEMI
    ;

declaration
    : TYPE NAME SEMI
    | TYPE NAME EQ value SEMI
    ;

methodCallStatement
    : methodCall SEMI
    ;

methodCall
    : NAME LBR arguments RBR dotMethodCall
    | NAME LBR RBR
    | NAME LBR arguments RBR
    | NAME LBR RBR dotMethodCall
    | NAME dotMethodCall
    ;

dotMethodCall
    : DOT methodCall
    ;

arguments
    : argument COMMA arguments
    | argument
    ;

argument
    : INT_LITERAL
    | STRING_LITERAL
    | BOOL_LITERAL
    | value
    ;

conditionStatement
    : IF condition block elseIfBlocks elseBlock
    | IF condition block elseIfBlocks
    | IF condition block elseBlock
    | IF condition block
    ;

elseIfBlocks
    : elseIfBlock
    | elseIfBlock elseIfBlocks
    ;

elseIfBlock
    : ELSE IF LBR condition RBR block
    ;

elseBlock
    : ELSE block
    ;

block
    : LFBR operations RFBR
    ;

operations
    : operation
    | operation operations
    |
    ;

condition
    : LBR bool_expression RBR
    ;

bool_expression
    : BOOL_LITERAL
    | methodCall
    | int_expression COMP_SIGN int_expression
    ;

assignment
    : NAME EQ value SEMI
    ;

value
    : STRING_LITERAL
    | int_expression
    | methodCall
    | bool_expression
    | NAME
    ;

int_expression
    : expr_unit ARYTHM expr_unit
    | expr_unit ARYTHM int_expression
    | LBR int_expression RBR ARYTHM expr_unit
    | LBR int_expression RBR ARYTHM int_expression
    | LBR int_expression RBR
    | expr_unit
    ;

expr_unit
    : INT_LITERAL
    | NAME
    | methodCall
    ;

methodIdentifiers
    : STATIC
    | METHOD_ACCESS
    | PUBLIC
    | METHOD_ACCESS STATIC
    | PUBLIC STATIC
    |
    ;

parameters
    : parameter COMMA parameters
    | parameter
    ;

parameter -> int
    : TYPE NAME {return 2;}
    ;

WS: " " -> skip;
NEW_LINE: "\n" | "\r" -> skip;
TAB: "  " -> skip;
COMMA: ",";
LBR: "(";
RBR: ")";
LFBR: "{";
RFBR: "}";
DO: "do";
PUBLIC: "public";
METHOD_ACCESS: "protected" | "private";
STATIC: "static";
CLASS: "class";
TYPE: "int" | "boolean" | "String";
VOID: "void";
SEMI: ";";
EQ: "=";
DOT: ".";
IF: "if";
ELSE: "else";
FOR: "for";
WHILE: "while";
RETURN: "return";
INT_LITERAL: "\\p{Digit}+";
BOOL_LITERAL: "false" | "true";
STRING_LITERAL: "\"(.*?)\"";
COMP_SIGN: ">" | ">=" | "==" | "<=" | "<" ;
ARYTHM: "+" | "-" | "*" | "/";
NAME: "[a-zA-Z_][a-zA-Z0-9_]*";